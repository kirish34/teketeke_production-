name: Stack Health

on:
  workflow_dispatch:
    inputs:
      base:
        description: "Base URL to probe (deploy or alias)"
        required: true
        default: "https://teketeke-an8u1azlg-teketeke.vercel.app"
      check_domain:
        description: "Also check apex/www + HSTS?"
        type: boolean
        required: true
        default: true
      apex:
        description: "Apex domain (if check_domain)"
        required: false
        default: "teketeke.app"
      www:
        description: "WWW domain (if check_domain)"
        required: false
        default: "www.teketeke.app"
      strict:
        description: "Fail the job if any FAIL lines appear"
        type: boolean
        required: true
        default: false
  schedule:
    - cron: "20 2 * * *"

permissions:
  contents: read
  issues: write
  pull-requests: write

concurrency:
  group: stack-health
  cancel-in-progress: true

jobs:
  health:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Preflight
        run: |
          set -euo pipefail
          BASE="${{ inputs.base }}"
          if [[ -z "$BASE" ]]; then
            echo "::error::Missing input 'base'."
            exit 1
          fi
          if ! echo "$BASE" | grep -Eq '^https://'; then
            echo "::warning::Base does not look like an https URL: $BASE"
          fi
          echo "Target base: $BASE"

      - name: Install deps
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq dnsutils

      - name: Run health-check
        id: run
        env:
          # Provide both names for script compatibility
          BASE_URL: ${{ inputs.base }}
          BASE: ${{ inputs.base }}
          # Non-empty fallback so health script doesn't bail on first run
          ADMIN_TOKEN: ${{ secrets.ADMIN_TOKEN || 'dummy-admin-token' }}
          # Only pass APEX/WWW when check_domain=true
          APEX: ${{ inputs.check_domain && inputs.apex || '' }}
          WWW: ${{ inputs.check_domain && inputs.www || '' }}
        run: |
          set -euo pipefail
          mkdir -p artifacts
          echo "Probing: $BASE"
          bash scripts/health-check.sh | tee artifacts/health.txt

          {
            echo "### TekeTeke Health Report"
            echo
            echo "**Target:** $BASE"
            echo
            sed -n '1,999p' artifacts/health.txt
          } >> "$GITHUB_STEP_SUMMARY"

          if grep -qE '^FAIL \|' artifacts/health.txt; then
            echo "had_failures=true"  >> "$GITHUB_OUTPUT"
          else
            echo "had_failures=false" >> "$GITHUB_OUTPUT"
          fi

      - name: Upload report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: health-report
          path: artifacts/health.txt
          retention-days: 7
          if-no-files-found: warn

      - name: Open or update failure issue
        # Skip mutating repo state on forked PRs
        if: ${{ steps.run.outputs.had_failures == 'true' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) }}
        uses: actions/github-script@v7
        env:
          BASE: ${{ inputs.base }}
        with:
          script: |
            const fs = require('fs');
            const { owner, repo } = context.repo;
            const base = process.env.BASE;
            const label = 'stack-health';
            const title = `Stack Health FAIL: ${base}`;
            const bodyText = fs.readFileSync('artifacts/health.txt', 'utf8');

            // Ensure label (tolerate 403 on restricted tokens)
            try {
              await github.rest.issues.getLabel({ owner, repo, name: label });
            } catch (e) {
              try {
                await github.rest.issues.createLabel({
                  owner, repo, name: label, color: 'd73a4a',
                  description: 'Automated health-check failures'
                });
              } catch (err) {
                if (err.status === 403) core.warning('Skipping label creation (permissions).');
                else throw err;
              }
            }

            const { data: issues } = await github.rest.issues.listForRepo({
              owner, repo, state: 'open', labels: label, per_page: 100
            });
            const existing = issues.find(i => i.title === title);

            const commentBody = [
              `New failing run for **${base}** at ${new Date().toISOString()}:`,
              '',
              '```txt',
              bodyText.length > 60000 ? (bodyText.slice(0, 60000) + '\n[truncated]') : bodyText,
              '```'
            ].join('\n');

            try {
              if (existing) {
                core.info(`Updating existing issue #${existing.number}`);
                await github.rest.issues.createComment({ owner, repo, issue_number: existing.number, body: commentBody });
              } else {
                core.info('Creating new failure issue');
                await github.rest.issues.create({ owner, repo, title, labels: [label], body: commentBody });
              }
            } catch (e) {
              if (e.status === 403) core.warning('Skipping issue mutation (permissions).');
              else throw e;
            }

      - name: Close failure issue if passing
        # Skip mutating repo state on forked PRs
        if: ${{ steps.run.outputs.had_failures == 'false' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name == github.repository) }}
        uses: actions/github-script@v7
        env:
          BASE: ${{ inputs.base }}
        with:
          script: |
            const { owner, repo } = context.repo;
            const base = process.env.BASE;
            const label = 'stack-health';
            const title = `Stack Health FAIL: ${base}`;

            try {
              const { data: issues } = await github.rest.issues.listForRepo({
                owner, repo, state: 'open', labels: label, per_page: 100
              });
              for (const is of issues) {
                if (is.title === title) {
                  await github.rest.issues.createComment({
                    owner, repo, issue_number: is.number,
                    body: `Passing run for **${base}** at ${new Date().toISOString()}. Closing. ✅`
                  });
                  await github.rest.issues.update({ owner, repo, issue_number: is.number, state: 'closed' });
                  core.info(`Closed issue #${is.number}`);
                }
              }
            } catch (e) {
              if (e.status === 403) core.warning('Skipping issue mutation (permissions).');
              else throw e;
            }

      - name: Enforce strict mode
        if: ${{ inputs.strict && steps.run.outputs.had_failures == 'true' }}
        run: |
          echo "FAIL lines detected and strict=true — failing the job."
          exit 1
